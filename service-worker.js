const CACHE_VERSION="v2.0.0";const PRECACHE=`precache-${CACHE_VERSION}`;const RUNTIME=`runtime-${CACHE_VERSION}`;const PRECACHE_URLS=["./","./index.html","./style.css","./app.js","./offline.html","./manifest.webmanifest","./icons/icon-192.png","./icons/icon-256.png","./icons/icon-384.png","./icons/icon-512.png"];self.addEventListener("install",e=>{e.waitUntil(caches.open(PRECACHE).then(c=>c.addAll(PRECACHE_URLS)));self.skipWaiting()});self.addEventListener("activate",e=>{e.waitUntil(caches.keys().then(keys=>Promise.all(keys.filter(k=>k!==PRECACHE&&k!==RUNTIME).map(k=>caches.delete(k)))));self.clients.claim()});self.addEventListener("fetch",e=>{const r=e.request;if(r.method!=="GET")return;if(r.mode==="navigate"||(r.headers.get("accept")||"").includes("text/html")){e.respondWith((async()=>{try{const f=await fetch(r);const c=await caches.open(RUNTIME);c.put(r,f.clone());return f}catch(e){const a=await caches.match(r);return a||caches.match("./offline.html")}})());return}if(["style","script"].includes(r.destination)){e.respondWith(caches.match(r).then(c=>c||fetch(r).then(resp=>caches.open(PRECACHE).then(C=>{C.put(r,resp.clone());return resp})))) ;return}if(r.destination==="image"){e.respondWith((async()=>{const c=await caches.open(RUNTIME);const d=await c.match(r);const n=fetch(r).then(resp=>{c.put(r,resp.clone());return resp}).catch(()=>null);return d||n||caches.match("./offline.html")})());return}e.respondWith((async()=>{try{return await fetch(r)}catch{return(await caches.match(r))||caches.match("./offline.html")}})())});